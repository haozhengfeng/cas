package org.haozf.cas.encoder.util;

import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import org.apache.commons.codec.binary.Hex;

/**
 * MD5密码加密 Md5Utils
 * 
 * @author zhengxingmiao
 * @date Sep 6, 2012
 */
public class Md5Utils {

	private static String defaultSalt = null; // 混淆码 防止破解

	/**
	 * 密码加密
	 * 
	 * @author zhengxingmiao
	 * @param rawPass 未加密密码，null作为空串
	 * @return 加密后密码
	 */
	public static String encodePassword(String rawPass) {
		return encodePassword(rawPass, defaultSalt);
	}

	/**
	 * 密码加密
	 * 
	 * @author zhengxingmiao
	 * @param rawPass 未加密密码，null作为空串
	 * @param salt 混淆码
	 * @return 加密后密码
	 */
	public static String encodePassword(String rawPass, String salt) {
		String saltedPass = mergePasswordAndSalt(rawPass, salt, false);
		// 创建具有指定算法名称的信息摘要
		MessageDigest messageDigest = null;
		try {
			messageDigest = MessageDigest.getInstance("MD5");
		} catch (NoSuchAlgorithmException e) {
			// e.printStackTrace();
		}
		byte[] digest;
		try {
			digest = messageDigest.digest(saltedPass.getBytes("UTF-8"));
		} catch (UnsupportedEncodingException e) {
			throw new IllegalStateException("UTF-8 not supported");
		}
		return new String(Hex.encodeHex(digest)).toUpperCase();
	}

	/**
	 * 验证密码是否正确
	 * 
	 * @author zhengxingmiao
	 * @param encPass 加密密码
	 * @param rawPass 未加密密码，null作为空串
	 * @return true:密码正确；false:密码错误
	 */
	public static boolean isPasswordValid(String encPass, String rawPass) {
		return isPasswordValid(encPass, rawPass, defaultSalt);
	}

	/**
	 * 验证密码是否正确
	 * 
	 * @author zhengxingmiao
	 * @param encPass 加密密码
	 * @param rawPass 未加密密码，null作为空串
	 * @param salt 混淆码
	 * @return true:密码正确；false:密码错误
	 */
	public static boolean isPasswordValid(String encPass, String rawPass,
			String salt) {
		if (encPass == null) {
			return false;
		}
		String pass2 = encodePassword(rawPass, salt);
		return encPass.equals(pass2);
	}

	/**
	 * Used by subclasses to extract the password and salt from a merged
	 * <code>String</code> created using
	 * {@link #mergePasswordAndSalt(String,Object,boolean)}.
	 * <p>
	 * The first element in the returned array is the password. The second
	 * element is the salt. The salt array element will always be present, even
	 * if no salt was found in the <code>mergedPasswordSalt</code> argument.
	 * </p>
	 * 
	 * @param mergedPasswordSalt as generated by
	 *            <code>mergePasswordAndSalt</code>
	 * 
	 * @return an array, in which the first element is the password and the
	 *         second the salt
	 * 
	 * @throws IllegalArgumentException if mergedPasswordSalt is null or empty.
	 */
	protected static String mergePasswordAndSalt(String password, Object salt,
			boolean strict) {
		if (password == null) {
			password = "";
		}
		if (strict && (salt != null)) {
			if ((salt.toString().lastIndexOf("{") != -1)
					|| (salt.toString().lastIndexOf("}") != -1)) {
				throw new IllegalArgumentException(
						"Cannot use { or } in salt.toString()");
			}
		}
		if ((salt == null) || "".equals(salt)) {
			return password;
		} else {
			return password + "{" + salt.toString() + "}";
		}
	}

	// 测试方法
	public static void main(String[] args) {
		
		// 不带混淆码
//		String str = "654321";
//		String md5_str = encodePassword(str);
//		System.out.println("加密密码=" + md5_str);
//		
//		// 带混淆码
//		String salt = "_zhxm_"; // 混淆码
//		String md5_str_hx = encodePassword(str, salt);
//		System.out.println("混淆密码=" + md5_str_hx);
		
		// 不带混淆码
		String str = "hzf123456";
		String md5_str = encodePassword(str);
		System.out.println("加密密码=" + md5_str);
		
		// 带混淆码
		String salt = "kykzhxm"; // 混淆码
		String md5_str_hx = encodePassword(str, salt);
		System.out.println("混淆密码=" + md5_str_hx);

	}
	
	
	// ///////////////////旧版加密///////////////////////////

	private final static String[] hexDigits = { "0", "1", "2", "3", "4", "5",
			"6", "7", "8", "9", "a", "b", "c", "d", "e", "f" };

	/**
	 * 轮换字节数组为十六进制字符串
	 * 
	 * @param b 字节数组
	 * @return String 十六进制字符串
	 * @author：zhengxingmiao
	 * @time: Sep 26, 2011 3:18:57 PM
	 */
	private static String byteArrayToHexString(byte[] b) {
		StringBuffer resultSb = new StringBuffer();
		for (int i = 0; i < b.length; i++) {
			resultSb.append(byteToHexString(b[i]));
		}
		return resultSb.toString();
	}

	/**
	 * 将一个字节转化成十六进制形式的字符串
	 * 
	 * @param b
	 * @return String
	 * @author：zhengxingmiao
	 * @time: Sep 26, 2011 3:19:27 PM
	 */
	private static String byteToHexString(byte b) {
		int n = b;
		if (n < 0)
			n = 256 + n;
		int d1 = n / 16;
		int d2 = n % 16;
		return hexDigits[d1] + hexDigits[d2];
	}

	/**
	 * md5加密字符串
	 * 
	 * @Title: encryptMD5
	 * @param str
	 * @return String
	 * @author：zhengxingmiao
	 * @time: Sep 26, 2011 3:16:05 PM
	 */
	public static String encryptMD5(String str, int length) {
		if ((str == null) || (str.trim().equals(""))) {
			return null;
		}
		MessageDigest md = null;
		try {
			// 创建具有指定算法名称的信息摘要
			md = MessageDigest.getInstance("MD5");
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		}
		// 使用指定的字节数组对摘要进行最后更新，然后完成摘要计算
		byte[] results = md.digest(str.getBytes());
		// 将得到的字节数组变成字符串返回
		String resultString = byteArrayToHexString(results).toUpperCase();

		if (length == 16) {
			// 16位加密
			resultString = resultString.toString().substring(8, 24);
		}
		return resultString;
	}

	/**
	 * 终极---MD5加密(重组MD5密码)
	 * 
	 * @Title: encryptMD5_Reset
	 * @param md5str
	 * @return String
	 * @author：zhengxingmiao
	 * @time: Sep 26, 2011 3:27:49 PM
	 */
	public static String encryptMD5_Reset(String str, int length) {
		String md5str = encryptMD5(str, length);
		StringBuffer sbf = new StringBuffer();
		// 重组密码
		sbf.append(md5str.substring(8, 16));// 取密文的8-16位
		sbf.append(md5str.substring(16, 24));// 取密文的16-24位
		sbf.append(md5str.substring(0, 8));// 取密文的0-8位
		sbf.append(md5str.substring(24));// 取密文的24位以后
		return sbf.toString();
	}

	/**
	 * 32位密码转换成16位密码
	 * 
	 * @Title: getMd5Str32to16
	 * @param md5str
	 * @return String
	 * @author：zhengxingmiao
	 * @time: Sep 26, 2011 3:24:34 PM
	 */
	public static String getMd5Str32to16(String md5str) {
		return md5str.substring(8, 24);
	}

}